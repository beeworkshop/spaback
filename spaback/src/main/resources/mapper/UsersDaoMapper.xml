<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.beeworkshop.spaback.dao.UsersDao">

	<!-- id对应DAO中的各方法名 -->

	<select id="usersCount" resultType="Integer">
		SELECT count(0)
		FROM sys_user u
		WHERE u.delete_status = '1'
	</select>

	<resultMap id="usersMap"
		type="com.beeworkshop.spaback.model.UserAuthorInfo">
		<id column="userId" property="userId" />
		<result column="username" property="username" />
		<result column="nickname" property="nickname" />
		<result column="roleId" property="roleId" />
		<result column="roleName" property="roleName" />
		<result column="createTime" property="createTime" />
		<result column="updateTime" property="updateTime" />
		<result column="lastLoginTime" property="lastLoginTime" />
		<result column="deleteStatus" property="deleteStatus" />
		<collection property="permissionList" ofType="String">
			<id column="permissionName" property="permissionName" />
		</collection>
	</resultMap>
	
	<select id="listUsers" resultMap="usersMap">
		SELECT
			u.*,
			r.role_name roleName,
			CONCAT(p.menu_name, p.permission_name) permissionName
		FROM (
			SELECT
			id userId,
			username username,
			nickname nickname,
			role_id roleId,
			delete_status deleteStatus,
			DATE_FORMAT(create_time, '%Y.%m.%d %T') createTime,
			DATE_FORMAT(update_time, '%Y.%m.%d %T') updateTime
			FROM
			sys_user
			WHERE delete_status = '1'
			ORDER BY id
			LIMIT #{offSet}, #{pageRow}   <!-- 在json中存在这两个字段 -->
		) u
		LEFT JOIN sys_role r ON r.id = u.roleId
		LEFT JOIN sys_role_permission rp ON rp.role_id = r.id
		LEFT JOIN sys_permission p ON p.id = rp.permission_id
		ORDER BY u.userId
	</select>

	<select id="getAllRoles"
		resultType="com.alibaba.fastjson.JSONObject">  <!-- 使用FastJson来映射结果集 -->
		SELECT
			id roleId,
			role_name roleName
			FROM sys_role
		WHERE delete_status='1'
	</select>

	<insert id="addUser" useGeneratedKeys="true"
		keyProperty="userId">
		INSERT INTO sys_user(username, password, nickname,role_id) 
		  VALUES(#{username}, #{password}, #{nickname}, #{roleId})
	</insert> <!-- 输入参数通过JSON的同名字段提供 -->

	<update id="updateUser">
		UPDATE sys_user
		  SET
		    nickname = #{nickname}
			<if test="password !='' and password !=null">
				,password = #{password}
			</if>
		    ,role_id = #{roleId}
		    ,delete_status = #{deleteStatus}
		  WHERE id = #{userId} and id != 10001
	</update> <!-- 输入参数通过JSON的同名字段提供 -->
	
	<resultMap id="rolesMap"
		type="com.beeworkshop.spaback.model.UserAuthorInfo">
		<id column="roleId" property="roleId" />
		<result column="roleName" property="roleName" />
		<collection property="users" ofType="com.alibaba.fastjson.JSONObject">
			<id column="userId" property="userId" />
			<result column="nickname" property="nickname" />
		</collection>
		<collection property="menus" ofType="com.beeworkshop.spaback.model.UserAuthorInfo">
			<id column="menuCode" property="menuCode" />
			<result column="menuName" property="menuName" />
			<collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
				<id column="permissionId" property="permissionId" />
				<result column="permissionName" property="permissionName" />
			</collection>
		</collection>
	</resultMap>
	
	<select id="listRoles" resultMap="rolesMap">
		SELECT
			r.id roleId, r.role_name roleName, u.id userId, u.nickname nickname, p.id permissionId,
			p.menu_code menuCode, p.menu_name menuName, p.permission_name permissionName
		FROM sys_role r
		  LEFT JOIN sys_user u ON r.id = u.role_id AND u.delete_status = '1'
		  LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
		  LEFT JOIN sys_permission p ON rp.permission_id = p.id
		WHERE r.delete_status = '1'
		ORDER BY r.id, p.id
	</select>
	
	<resultMap id="permsMap"
		type="com.beeworkshop.spaback.model.UserAuthorInfo">
		<id column="menuName" property="menuName" />
		<collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">
			<id column="id" property="id" />
			<result column="permissionName" property="permissionName" />
			<result column="requiredPerm" property="requiredPerm" javaType="Integer" />
		</collection>
	</resultMap>
	
	<select id="listAllPerms" resultMap="permsMap">
		SELECT p.id id, p.menu_name menuName, p.permission_name permissionName,
		       p.required_permission requiredPerm
		FROM sys_permission p
	</select>

	<insert id="addRole" useGeneratedKeys="true" keyProperty="roleId">
		INSERT INTO sys_role(role_name) VALUES(#{roleName})
	</insert> <!-- 输入参数通过JSON的同名字段提供 -->

	<insert id="addRolePerms">
	    <!-- 表sys_role_permission的id字段是自增的 -->
		INSERT INTO sys_role_permission(role_id, permission_id) VALUES
		  <!-- UsersDao中对应声明的方法
            int addRolePerms(@Param("roleId") String roleId, @Param("permissions") List<Integer> perms);
          -->
		  <foreach collection="permissions" index="index" item="item" separator=","> 
		     <!-- <index,item>即<key,value> --> <!-- ,分隔符会自动按需添加 -->
			  (#{roleId}, #{item})
		  </foreach> 
	</insert>

	<resultMap id="allRoleInfo"
		type="com.beeworkshop.spaback.model.UserAuthorInfo">
		<id column="roleId" property="roleId" />
		<result column="roleName" property="roleName" />
		<collection property="users" ofType="com.alibaba.fastjson.JSONObject">
			<id column="userId" property="userId" />
		</collection>
		<collection property="permissionIds" ofType="Integer">
			<id column="permissionId" property="permissionId" />
		</collection>
	</resultMap>
	
	<select id="getRoleAllInfo" resultMap="allRoleInfo">
		SELECT r.id roleId, r.role_name roleName, u.id userId, p.id permissionId
		FROM sys_role r
		LEFT JOIN sys_user u ON r.id = u.role_id AND u.delete_status = '1'
		LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.delete_status = '1'
		LEFT JOIN sys_permission p ON rp.permission_id = p.id
		WHERE r.id = #{roleId}
	</select> <!-- 输入参数通过JSON的同名字段提供 -->

	<update id="delRole">
		UPDATE sys_role SET delete_status = '2'
		WHERE id = #{roleId} and id !=1
	</update> <!-- 输入参数通过JSON的同名字段提供 -->
	
	<update id="delRoleAllPerms">
		UPDATE sys_role_permission SET delete_status = '2'
		WHERE role_id = #{roleId}
	</update> <!-- 输入参数通过JSON的同名字段提供 -->

	<update id="delPastPerms">
		UPDATE sys_role_permission SET delete_status = '2'
		WHERE role_id = #{roleId} AND permission_id in (
		<!-- UsersDao中对应声明的方法
		  int delPastPerms(@Param("roleId") String roleId, @Param("permissions") List<Integer> perms);
		 -->
		<foreach collection="permissions" index="index" item="item" separator=",">
		<!-- <index,item>即<key,value> --> <!-- ,分隔符会自动按需添加 -->
			#{item}
		</foreach>
		)
	</update>
	
	<update id="updateRoleName">
		UPDATE sys_role SET role_name = #{roleName}
		WHERE id = #{roleId}
	</update> <!-- 输入参数通过JSON的同名字段提供 -->
	
	<select id="verifyUsername" resultType="int"> <!-- 这里没有用int的包装类Integer -->
		SELECT count(0) FROM sys_user
		WHERE username = #{username} AND delete_status='1'
	</select> <!-- 输入参数通过JSON的同名字段提供 -->
</mapper>